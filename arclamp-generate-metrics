#!/bin/bash

# -e indicates this script should abort if any command does not exit
# with status 0.  To debug this, you can print commands to stderr as
# they are executed, by running: `bash -x arclamp-generate-metrics`.
set -e
set -u
shopt -s globstar nullglob

function update_metrics() {
	local data_dir="$1"
	local tmpout=`mktemp -t arclamp-metrics.XXXXXXXXXX`

	local periods=`find $data_dir/logs -mindepth 1 -maxdepth 1 -type d -printf '%f '`
	local instances=`find $data_dir/logs -type f | awk 'match($0, /\.([^\.]+)\.[^\.]+\.log(\.|$)/, a) {print a[1];}' | sort -u`
	local entries=`find $data_dir/logs -type f | awk 'match($0, /\.([^\.]+)\.log(\.|$)/, a) {print a[1];}' | sort -u`

	echo "# HELP arclamp_oldest_log_seconds Timestamp of oldest input file" >>$tmpout
	echo "# TYPE arclamp_oldest_log_seconds gauge" >>$tmpout
	for period in $periods; do
	for instance in $instances; do
		for entry in $entries; do
		local oldest=`find $data_dir/logs/$period -name "*$instance.$entry.log*" -type f -printf '%T@\n' 2>/dev/null | sort | head -1`
		if [ -n "$oldest" ]; then
			echo "arclamp_oldest_log_seconds{period=\"$period\",instance=\"$instance\",entry=\"$entry\"} $oldest" >>$tmpout
		fi
		done
	done
	done

	echo "# HELP arclamp_newest_log_seconds Timestamp of newest input file" >>$tmpout
	echo "# TYPE arclamp_newest_log_seconds gauge" >>$tmpout
	for period in $periods; do
	for instance in $instances; do
		for entry in $entries; do
		local newest=`find $data_dir/logs/$period -name "*$instance.$entry.log*" -type f -printf '%T@\n' 2>/dev/null | sort | tail -1`
		if [ -n "$newest" ]; then
			echo "arclamp_newest_log_seconds{period=\"$period\",instance=\"$instance\",entry=\"$entry\"} $newest" >>$tmpout
		fi
		done
	done
	done

	echo "# HELP arclamp_oldest_svg_seconds Timestamp of oldest output file" >>$tmpout
	echo "# TYPE arclamp_oldest_svg_seconds gauge" >>$tmpout
	for period in $periods; do
	for instance in $instances; do
		for entry in $entries; do
		local oldest=`find $data_dir/svgs/$period -name "*$instance.$entry.*svgz" -type f -printf '%T@\n' 2>/dev/null | sort | head -1`
		if [ -n "$oldest" ]; then
			echo "arclamp_oldest_svg_seconds{period=\"$period\",instance=\"$instance\",entry=\"$entry\"} $oldest" >>$tmpout
		fi
		done
	done
	done

	echo "# HELP arclamp_newest_svg_seconds Timestamp of newest output file" >>$tmpout
	echo "# TYPE arclamp_newest_svg_seconds gauge" >>$tmpout
	for period in $periods; do
	for instance in $instances; do
		for entry in $entries; do
		local newest=`find $data_dir/svgs/$period -name "*$instance.$entry.*svgz" -type f -printf '%T@\n' 2>/dev/null | sort | tail -1`
		if [ -n "$newest" ]; then
			echo "arclamp_newest_svg_seconds{period=\"$period\",instance=\"$instance\",entry=\"$entry\"} $newest" >>$tmpout
		fi
		done
	done
	done

	echo "# HELP arclamp_log_bytes_total Size of input files" >>$tmpout
	echo "# TYPE arclamp_log_bytes_total gauge" >>$tmpout
	for period in $periods; do
	local bytes=`du -sb $data_dir/logs/$period 2>/dev/null | cut -f1`
	if [ -n "$bytes" ]; then
		echo "arclamp_log_bytes_total{period=\"$period\"} $bytes" >>$tmpout
	fi
	done

	echo "# HELP arclamp_svg_bytes_total Size of output files" >>$tmpout
	echo "# TYPE arclamp_svg_bytes_total gauge" >>$tmpout
	for period in $periods; do
	local bytes=`du -sb $data_dir/svgs/$period 2>/dev/null | cut -f1`
	if [ -n "$bytes" ]; then
		echo "arclamp_svg_bytes_total{period=\"$period\"} $bytes" >>$tmpout
	fi
	done

	mv $tmpout $data_dir/metrics
	chmod 644 $data_dir/metrics
}

update_metrics /srv/arclamp
